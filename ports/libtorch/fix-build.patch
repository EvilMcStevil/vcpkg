diff --git a/CMakeLists.txt b/CMakeLists.txt
index f3fee2f..463788e 100644
--- a/CMakeLists.txt
+++ b/CMakeLists.txt
@@ -1244,8 +1244,7 @@ if(USE_MIMALLOC)
   set(MI_BUILD_OBJECT OFF)
   set(MI_BUILD_TESTS OFF)
   add_definitions(-DUSE_MIMALLOC)
-  add_subdirectory(third_party/mimalloc)
-  include_directories(third_party/mimalloc/include)
+  find_package(mimalloc CONFIG REQUIRED)
 endif()
 
 if(USE_MIMALLOC AND USE_MIMALLOC_ON_MKL)
@@ -1313,10 +1312,7 @@ if(BUILD_SHARED_LIBS)
     DIRECTORY ${PROJECT_SOURCE_DIR}/cmake/Modules_CUDA_fix
     DESTINATION share/cmake/Caffe2/
     COMPONENT dev)
-  install(
-    FILES ${PROJECT_SOURCE_DIR}/cmake/Modules/FindCUDAToolkit.cmake
-    DESTINATION share/cmake/Caffe2/
-    COMPONENT dev)
+ 
   install(
     FILES ${PROJECT_SOURCE_DIR}/cmake/Modules/FindCUSPARSELT.cmake
     DESTINATION share/cmake/Caffe2/
diff --git a/aten/src/ATen/CMakeLists.txt b/aten/src/ATen/CMakeLists.txt
index 085af37..7068534 100644
--- a/aten/src/ATen/CMakeLists.txt
+++ b/aten/src/ATen/CMakeLists.txt
@@ -515,7 +515,7 @@ if(NOT EMSCRIPTEN AND NOT INTERN_BUILD_MOBILE)
     list(APPEND ATen_THIRD_PARTY_INCLUDE ${CMAKE_BINARY_DIR}/include)
     link_directories(${CMAKE_BINARY_DIR}/sleef/lib)
   else()
-    add_library(sleef SHARED IMPORTED)
+    add_library(sleef UNKNOWN IMPORTED)
     find_library(SLEEF_LIBRARY sleef)
     if(NOT SLEEF_LIBRARY)
       message(FATAL_ERROR "Cannot find sleef")
@@ -523,7 +523,7 @@ if(NOT EMSCRIPTEN AND NOT INTERN_BUILD_MOBILE)
     message("Found sleef: ${SLEEF_LIBRARY}")
     set_target_properties(sleef PROPERTIES IMPORTED_LOCATION "${SLEEF_LIBRARY}")
   endif()
-  list(APPEND ATen_CPU_DEPENDENCY_LIBS sleef)
+  list(APPEND ATen_CPU_DEPENDENCY_LIBS ${SLEEF_LIBRARY})
 
   if(NOT MSVC)
     set(CMAKE_C_FLAGS_DEBUG ${OLD_CMAKE_C_FLAGS_DEBUG})
@@ -534,8 +534,6 @@ if(USE_CUDA AND NOT USE_ROCM)
   add_definitions(-DCUTLASS_ENABLE_TENSOR_CORE_MMA=1)
   add_definitions(-DCUTLASS_ENABLE_SM90_EXTENDED_MMA_SHAPES=1)
   add_definitions(-DCUTE_SM90_EXTENDED_MMA_SHAPES_ENABLED)
-  list(APPEND ATen_CUDA_INCLUDE ${CMAKE_CURRENT_SOURCE_DIR}/../../../third_party/cutlass/include)
-  list(APPEND ATen_CUDA_INCLUDE ${CMAKE_CURRENT_SOURCE_DIR}/../../../third_party/cutlass/tools/util/include)
   if($ENV{ATEN_STATIC_CUDA})
     list(APPEND ATen_CUDA_DEPENDENCY_LIBS
       ${CUDA_LIBRARIES}
diff --git a/aten/src/ATen/native/quantized/cpu/qnnpack/CMakeLists.txt b/aten/src/ATen/native/quantized/cpu/qnnpack/CMakeLists.txt
index 7ea66d9..7fd7ba6 100644
--- a/aten/src/ATen/native/quantized/cpu/qnnpack/CMakeLists.txt
+++ b/aten/src/ATen/native/quantized/cpu/qnnpack/CMakeLists.txt
@@ -381,7 +381,7 @@ if(NOT TARGET fxdiv AND NOT USE_SYSTEM_FXDIV)
   add_subdirectory(
     "${FXDIV_SOURCE_DIR}"
     "${CONFU_DEPENDENCIES_BINARY_DIR}/fxdiv")
-elseif(NOT TARGET fxdiv AND USE_SYSTEM_FXDIV)
+elseif(false)
   find_file(FXDIV_HDR fxdiv.h PATH_SUFFIXES include)
   if(NOT FXDIV_HDR)
     message(FATAL_ERROR "Cannot find fxdiv")
@@ -402,7 +402,7 @@ if(NOT TARGET psimd AND NOT USE_SYSTEM_PSIMD)
   add_subdirectory(
     "${PSIMD_SOURCE_DIR}"
     "${CONFU_DEPENDENCIES_BINARY_DIR}/psimd")
-elseif(NOT TARGET psimd AND USE_SYSTEM_PSIMD)
+elseif(false)
   find_file(PSIMD_HDR psimd.h PATH_SUFFIXES include)
   if(NOT PSIMD_HDR)
     message(FATAL_ERROR "Cannot find psimd")
@@ -419,7 +419,7 @@ if(NOT TARGET fp16 AND NOT USE_SYSTEM_FP16)
   add_subdirectory(
     "${FP16_SOURCE_DIR}"
     "${CONFU_DEPENDENCIES_BINARY_DIR}/fp16")
-elseif(NOT TARGET fp16 AND USE_SYSTEM_FP16)
+elseif(false)
   find_file(FP16_HDR fp16.h PATH_SUFFIXES include)
   if(NOT FP16_HDR)
     message(FATAL_ERROR "Cannot find fp16")
@@ -427,6 +427,7 @@ elseif(NOT TARGET fp16 AND USE_SYSTEM_FP16)
   add_library(fp16 STATIC "${FP16_HDR}")
   set_target_properties(fp16 PROPERTIES LINKER_LANGUAGE C)
 endif()
+find_package(fp16 REQUIRED)
 target_link_libraries(pytorch_qnnpack PRIVATE fp16)
 
 # -- [ Undo cmake-4 compat mode
diff --git a/c10/CMakeLists.txt b/c10/CMakeLists.txt
index 34577ca..42dff2a 100644
--- a/c10/CMakeLists.txt
+++ b/c10/CMakeLists.txt
@@ -121,8 +121,7 @@ if(NOT BUILD_LIBTORCHLESS)
   endif()
 
   if(USE_MIMALLOC)
-    target_link_libraries(c10 PRIVATE "mimalloc-static")
-    add_dependencies(c10 mimalloc-static)
+    target_link_libraries(c10 PRIVATE "mimalloc")
   endif()
 
   if(LINUX)
diff --git a/caffe2/CMakeLists.txt b/caffe2/CMakeLists.txt
index d2d23b7..5928870 100644
--- a/caffe2/CMakeLists.txt
+++ b/caffe2/CMakeLists.txt
@@ -87,7 +87,7 @@ endif()
 # Note: the folders that are being commented out have not been properly
 # addressed yet.
 
-if(NOT MSVC AND USE_XNNPACK)
+if(false)
   if(NOT TARGET fxdiv)
     set(FXDIV_BUILD_TESTS OFF CACHE BOOL "")
     set(FXDIV_BUILD_BENCHMARKS OFF CACHE BOOL "")
@@ -1134,9 +1134,7 @@ if(USE_XPU)
   endif()
 endif()
 
-if(NOT MSVC AND USE_XNNPACK)
-  TARGET_LINK_LIBRARIES(torch_cpu PRIVATE fxdiv)
-endif()
+
 
 # ==========================================================
 # formerly-libtorch flags
diff --git a/cmake/Dependencies.cmake b/cmake/Dependencies.cmake
index 5227204..b97a084 100644
--- a/cmake/Dependencies.cmake
+++ b/cmake/Dependencies.cmake
@@ -378,6 +378,9 @@ if(INTERN_BUILD_MOBILE OR NOT DISABLE_NNPACK_AND_FAMILY)
   set(USE_PTHREADPOOL ON CACHE BOOL "" FORCE)
   set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -DUSE_PTHREADPOOL")
 
+  find_package(unofficial-pthreadpool CONFIG REQUIRED)
+  add_library(pthreadpool ALIAS unofficial::pthreadpool)
+
   if(NOT TARGET pthreadpool)
     if(USE_SYSTEM_PTHREADPOOL)
       add_library(pthreadpool SHARED IMPORTED)
@@ -412,6 +415,9 @@ endif()
 if(NOT CMAKE_SYSTEM_PROCESSOR MATCHES "^(s390x|ppc64le)$")
   # ---[ Caffe2 uses cpuinfo library in the thread pool
   # ---[ But it doesn't support s390x/powerpc and thus not used on s390x/powerpc
+  find_package(cpuinfo CONFIG REQUIRED)
+  add_library(cpuinfo ALIAS cpuinfo::cpuinfo)
+  add_library(clog ALIAS cpuinfo::clog)
   if(NOT TARGET cpuinfo AND USE_SYSTEM_CPUINFO)
     add_library(cpuinfo SHARED IMPORTED)
     find_library(CPUINFO_LIBRARY cpuinfo)
@@ -492,6 +498,12 @@ if(USE_NNPACK)
 endif()
 
 # ---[ XNNPACK
+if(USE_XNNPACK)
+  find_package(xnnpack CONFIG REQUIRED)
+  add_library(XNNPACK ALIAS xnnpack::XNNPACK)
+  add_library(microkernels-prod ALIAS xnnpack::microkernels-prod)
+  list(APPEND Caffe2_DEPENDENCY_LIBS XNNPACK microkernels-prod)
+endif()
 if(USE_XNNPACK AND NOT USE_SYSTEM_XNNPACK)
   if(NOT DEFINED XNNPACK_SOURCE_DIR)
     set(XNNPACK_SOURCE_DIR "${CAFFE2_THIRD_PARTY_ROOT}/XNNPACK" CACHE STRING "XNNPACK source directory")
@@ -702,7 +714,7 @@ if(BUILD_TEST OR BUILD_MOBILE_BENCHMARK OR BUILD_MOBILE_TEST)
 endif()
 
 # ---[ FBGEMM
-if(USE_FBGEMM)
+if(FALSE)
   set(CAFFE2_THIRD_PARTY_ROOT "${PROJECT_SOURCE_DIR}/third_party")
   if(NOT DEFINED FBGEMM_SOURCE_DIR)
     set(FBGEMM_SOURCE_DIR "${CAFFE2_THIRD_PARTY_ROOT}/fbgemm" CACHE STRING "FBGEMM source directory")
@@ -755,6 +767,10 @@ endif()
 
 if(USE_FBGEMM)
   caffe2_update_option(USE_FBGEMM ON)
+  find_package(asmjit REQUIRED)
+  find_package(fbgemmLibrary REQUIRED)
+  list(APPEND Caffe2_DEPENDENCY_LIBS fbgemm)
+
 else()
   caffe2_update_option(USE_FBGEMM OFF)
   message(WARNING
@@ -829,7 +845,13 @@ if(NOT TARGET fp16 AND NOT USE_SYSTEM_FP16)
       "${CONFU_DEPENDENCIES_BINARY_DIR}/FP16")
   endif()
 elseif(NOT TARGET fp16 AND USE_SYSTEM_FP16)
-  add_library(fp16 STATIC "/usr/include/fp16.h")
+  find_file(FP16_HDR fp16.h PATH_SUFFIXES include)
+  if(NOT FP16_HDR)
+    message(FATAL_ERROR "Cannot find fp16")
+  endif()
+
+  add_library(fp16 INTERFACE)
+  target_include_directories(fp16 INTERFACE "${FP16_INCLUDE_DIR}")
   set_target_properties(fp16 PROPERTIES LINKER_LANGUAGE C)
 endif()
 list(APPEND Caffe2_DEPENDENCY_LIBS fp16)
@@ -1329,7 +1351,7 @@ if(CAFFE2_CMAKE_BUILDING_WITH_MAIN_REPO AND NOT INTERN_DISABLE_ONNX)
       caffe2_interface_library(onnx onnx_library)
     endif()
     list(APPEND Caffe2_DEPENDENCY_WHOLE_LINK_LIBS onnx_library)
-  else()
+  elseif(FALSE)
     add_library(onnx SHARED IMPORTED)
     find_library(ONNX_LIBRARY onnx)
     if(NOT ONNX_LIBRARY)
@@ -1345,6 +1367,7 @@ if(CAFFE2_CMAKE_BUILDING_WITH_MAIN_REPO AND NOT INTERN_DISABLE_ONNX)
     message("-- Found onnx: ${ONNX_LIBRARY} ${ONNX_PROTO_LIBRARY}")
     list(APPEND Caffe2_DEPENDENCY_LIBS onnx_proto onnx)
   endif()
+  find_package(ONNX CONFIG REQUIRED)
   # Recover the build shared libs option.
   set(BUILD_SHARED_LIBS ${TEMP_BUILD_SHARED_LIBS})
 endif()
@@ -1586,6 +1609,7 @@ endif()
 #
 set(TEMP_BUILD_SHARED_LIBS ${BUILD_SHARED_LIBS})
 set(BUILD_SHARED_LIBS OFF CACHE BOOL "Build shared libs" FORCE)
+if(0)
 add_subdirectory(${PROJECT_SOURCE_DIR}/third_party/fmt)
 
 # Disable compiler feature checks for `fmt`.
@@ -1596,7 +1620,8 @@ add_subdirectory(${PROJECT_SOURCE_DIR}/third_party/fmt)
 # `fmt` is compatible with a superset of the compilers that PyTorch is, it
 # shouldn't be too bad to just disable the checks.
 set_target_properties(fmt-header-only PROPERTIES INTERFACE_COMPILE_FEATURES "")
-
+endif()
+find_package(fmt REQUIRED)
 list(APPEND Caffe2_DEPENDENCY_LIBS fmt::fmt-header-only)
 set(BUILD_SHARED_LIBS ${TEMP_BUILD_SHARED_LIBS} CACHE BOOL "Build shared libs" FORCE)
 
@@ -1745,13 +1770,10 @@ if(USE_KINETO)
   endif()
 endif()
 
-# Include google/FlatBuffers
-include(${CMAKE_CURRENT_LIST_DIR}/FlatBuffers.cmake)
 
-# Include cpp-httplib
-add_library(httplib INTERFACE IMPORTED)
-target_include_directories(httplib SYSTEM INTERFACE ${PROJECT_SOURCE_DIR}/third_party/cpp-httplib)
+find_package(FlatBuffers REQUIRED)
+add_library(flatbuffers ALIAS flatbuffers::flatbuffers)
+find_package(httplib REQUIRED)
+find_package(nlohmann_json REQUIRED)
+add_library(nlohmann ALIAS nlohmann_json)
 
-# Include nlohmann-json
-add_library(nlohmann INTERFACE IMPORTED)
-include_directories(nlohmann SYSTEM INTERFACE ${PROJECT_SOURCE_DIR}/third_party/nlohmann/include)
diff --git a/torch/CMakeLists.txt b/torch/CMakeLists.txt
index 8b8ebdc..1777c0e 100644
--- a/torch/CMakeLists.txt
+++ b/torch/CMakeLists.txt
@@ -59,18 +59,7 @@ set(TORCH_PYTHON_INCLUDE_DIRECTORIES
     ${CMAKE_BINARY_DIR}
     ${CMAKE_BINARY_DIR}/aten/src
     ${CMAKE_BINARY_DIR}/caffe2/aten/src
-    ${CMAKE_BINARY_DIR}/third_party
-    ${CMAKE_BINARY_DIR}/third_party/onnx
-
     ${TORCH_ROOT}/third_party/valgrind-headers
-
-    ${TORCH_ROOT}/third_party/gloo
-    ${TORCH_ROOT}/third_party/onnx
-    ${TORCH_ROOT}/third_party/flatbuffers/include
-    ${TORCH_ROOT}/third_party/kineto/libkineto/include
-    ${TORCH_ROOT}/third_party/cpp-httplib
-    ${TORCH_ROOT}/third_party/nlohmann/include
-
     ${TORCH_SRC_DIR}/csrc
     ${TORCH_SRC_DIR}/csrc/api/include
     ${TORCH_SRC_DIR}/lib
